<?php

/**
 * Implements hook_libraries_info().
 */
function shave_libraries_info() {
  $libraries['shave'] = array(
    'name' => 'shave',
    'vendor url' => 'https://dollarshaveclub.github.io/shave/',
    'download url' => 'https://github.com/dollarshaveclub/shave',
    'version arguments' => array(
      'file' => 'package.json',
      'pattern' => '/version": "(\d+\.+\d+\.+\d+)"/',
      'lines' => 5,
    ),
    'files' => array(
      'js' => array(
        'dist/shave.min.js',
      ),
    ),
  );

  return $libraries;
}

/**
* Implements hook_field_formatter_info().
*/
function shave_field_formatter_info() {
  return array(
    'shave' => array( //Machine name of the formatter
      'label' => t('Shave Formatter'),
      'field types' => array('text', 'text_long', 'text_with_summary'), //This will only be available to text fields
      'settings' => array( //Array of the settings we'll create
        'shave_size' => '60', //give a default value for when the form is first loaded
      ),
    ),
  );
}

/**
* Implements hook_field_formatter_settings_form().
*/
function shave_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  //This gets the view_mode where our settings are stored
  $display = $instance['display'][$view_mode];
  //This gets the actual settings
  $settings = $display['settings'];
  //Initialize the element variable
  $element = array();
  //Add your select box
  $element['shave_size'] = array(
    '#type' => 'select',
    '#title' => t('Shave Size'), // Widget label
    '#description' => t('How much you want to shave your string or sentense'), // Helper text
    '#default_value' => $settings['shave_size'], // Get the value if it's already been set
    '#options' => array(
      '40' => '40',
      '50' => '50',
      '60' => '60',
      '70' => '70',
      '80' => '80',
      '90' => '90',
      '100' => '100',
      '110' => '110',
      '120' => '120',
      '130' => '130',
      '140' => '140',
      '150' => '150'
    ),
  );
  return $element;
}


/**
* Implements hook_field_formatter_settings_summary().
*/
function shave_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = t('Shave string/sentence upto @size height', array(
    '@size' => $settings['shave_size'],
  )); // we use t() for translation and placeholders to guard against attacks
  return $summary;
}



/**
* Implements hook_field_formatter_view().
*/
function shave_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array(); // Initialize the var
  $settings = $display['settings']; // get the settings
  $size = $settings['shave_size']; // The Size setting selected in the settings form

  libraries_load('shave'); //load the shave library

  // Add js.
  drupal_add_js(array('shave_formatter' => array( 'size' => $size)), 'setting');
  drupal_add_js(drupal_get_path('module', 'shave'). '/js/shave_formatter.js');

  // Create the image - Note that I'm storing the images in our module but they could be anywhere
  $image = '';
  foreach ($items as $delta => $item) {
    $text_value = $item['safe_value']; // Getting the actual value
  }

  if(isset($text_value)) {
    $ele = theme('html_tag', array(
      'element' => array(
        '#tag' => 'div',
        '#attributes' => array(
          'class' => 'shave-formatter shave-module shave-format-'. $size,
          'data-size' => $size,
          ),
        '#value' => $text_value,
      ),
    ));
    $element[0]['#markup'] = $ele; // Assign it to the #markup of the element
  }
  return $element;
}
